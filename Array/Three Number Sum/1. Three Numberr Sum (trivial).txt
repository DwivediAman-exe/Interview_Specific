//THREE NUMBER SUM 
//TIME COMPLEXITY - O(n^3)                                                                                   {n->size of array}
//{why? since we are using 3 nested fr loops in function "find_three_number" }
//SPACE COMPLEXITY - O(1)
//{why? since we are not using extra space to store the array numbers except few local variables which takes constant space}

//this is the trivial method

#include <bits/stdc++.h> 
using namespace std; 

void find_three_number(int a[], int size, int sum)          // function to find the numbers in given arrray which add to the target sum 
{
    vector<pair<int,pair<int,int>>>ans;                     // vector to store all the triplets 
    
    for(int i=0;i<size-2;i++)                               // Fix the first element as a[i]  
    {
        for(int j=i+1;j<size-1;j++)                         // Fix the second element as a[j]  
        {
            for(int k=j+1;k<size;k++)                       // Now looking for the third number in array
            {
                if((a[i]+a[j]+a[k])==sum)                   // if triplets found the storing them in resultant vector
                {
                    ans.push_back({a[i],{a[j],a[k]}});
                }
            }
        }
    }
    
    for (int i=0; i<ans.size(); i++)                       // printing the resultant vector
    { 
        cout<<ans[i].first<<" "<<ans[i].second.first<<" "<<ans[i].second.second<<endl; 
    } 
    
    
}

int main() 
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int a[] = {12,3,1,2,-6,5,-8,6};            // input array
    int sum = 0;                               // target sum
    int size = sizeof(a)/sizeof(a[0]);         // calculating size of input array
    find_three_number(a,size,sum);               // calling "find_two_number" function to find the result
    return 0;
}